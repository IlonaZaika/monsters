import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

//Export thunk for fetching monsters
// The return value becomes the payload in the fulfilled action
export const fetchMonsters = createAsyncThunk(
  "monsters/requestMonsters",
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch(
        "https://jsonplaceholder.typicode.com/users"
      );
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json(); // Return parsed JSON for the fulfilled action payload
    } catch (error) {
      return rejectWithValue(error.message); // Dispatch the rejected action with error message
    }
  }
);

const initialState = {
  isPending: false,
  monsters: [],
  error: null,
};

export const monstersSlice = createSlice({
  name: "monsters",
  initialState,
  reducers: {}, //Standard reducers can be here if needed
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchMonsters.pending, (state) => {
        return {
          ...state,
          isPending: true,
        };
      })
      .addCase(fetchMonsters.fulfilled, (state, action) => {
        return {
          ...state,
          isPending: false,
          monsters: action.payload,
        };
      })
      .addCase(fetchMonsters.rejected, (state, action) => {
        return {
          ...state,
          isPending: false,
          error: action.error,
        };
      });
  },
});

// Export the slice reducer for use in the store configuration
export const monstersReducer = monstersSlice.reducer;
